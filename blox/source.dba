`Created: 31/10/03 03:05:28
`***** Main Source File *****
`All code by the_winch, thewinch@gmail.com, http://winch.pinkbile.com/
`Used this site for reference and some methods.
`http://www.colinfahey.com/2003jan_tetris/tetris_standard_specifications.htm

global version as string : version = "v1.5"
global web as string : web = "http://winch.pinkbile.com/"

`load media
load image "tiles\red.png",1,1
load image "tiles\green.png",2,1
load image "tiles\blue.png",3,1
load image "tiles\yellow.png",4,1
load image "tiles\purple.png",5,1
load image "tiles\background.png",10,1
`load next piece images
load image "tiles\O.png",20,1
load image "tiles\I.png",21,1
load image "tiles\S.png",22,1
load image "tiles\Z.png",23,1
load image "tiles\L.png",24,1
load image "tiles\J.png",25,1
load image "tiles\T.png",26,1

ink rgb(0,0,0),0 : autocam off : disable escapekey
randomize timer()
global dim board(19,9,1) as integer
`0=empty space 1=falling block 2 = nonfalling block
type block_t
  shape as string
  colour as integer
  rotation as integer
  nxt as string
  x as integer : y as integer
  falls as integer
endtype
global block as block_t
block.x = -1
block.nxt = next_shape()

type game_t
  level as integer
  start_level as integer
  score as integer
  lines as integer
  speed as integer
  start_time as integer
  end_time as integer
  play_time as integer
  pause_time as integer
  time as integer
  over as integer
  last_key as integer
  option as integer
  show_next as integer
  sync_mode as integer
endtype
global game as game_t

type scores_t
  name as string
  time as string
  lines as string
  score as string
endtype
dim scores(29) as scores_t : `first 15 normal, second 15 40 lines.

reset_game()
load_settings()
scores_load()

`set sync mode
if game.sync_mode = 0 then sync off

repeat
  cls 0
  game.option = menu()
  if game.option = 0 then reset_game() : game()
  if game.option = 1 then reset_game() : game()
  if game.option = 2 then scores_show()
  cls 0
until game.option > 2

save_settings()
scores_save()
`CLEAN UP
cls 0
undim board(0)
for i = 1 to 26
if image exist(i) then delete image i
next i
unlock pixels
end

function game()
local io as integer : local aa as integer : local x as integer : local y as integer
local stop as integer
`MAIN LOOP
game.time = timer() : game.start_time = game.time
repeat
cls 0
if timer() - game.time > game.speed
  if block.x = -1
    if game.over = 0
      block.shape = block.nxt
      block.rotation = 0
      block.x = 5 : block.y = 19
      block.colour = rnd(4)+1
      block.nxt = next_shape()
      calculate_score()
      if game.over = 0 then game.over = draw_shape()
      if game.over = 0
        line_check()
      else
        game.end_time = timer() - game.start_time
        scores_check()
        stop = 1 : `exit the game function
      endif
    else
        game.end_time = timer() - game.start_time
        scores_check()
        stop = 1 : `exit the game function
    endif
  else
    if game.over = 0 then move_down()
  endif
  game.time = timer()
endif
if upkey() and last_key <> scancode() then game.last_key = scancode() : rotate_shape()
if leftkey() and last_key <> scancode() then game.last_key = scancode() : move_shape(0)
if rightkey() and last_key <> scancode() then game.last_key = scancode() : move_shape(1)
if downkey() and last_key <> scancode() then game.last_key = scancode() : if game.over = 0 then drop_shape()
if scancode() = 25 and last_key <> scancode() : `p = pause
  game.time = timer()
  lock pixels
  repeat
    if scancode() <> last_key then last_key = scancode()
  until scancode() = 25 and last_key <> scancode()
  unlock pixels
  game.pause_time = game.pause_time+ timer() - game.time
  game.time = timer()
endif
if scancode() = 49 and last_key <> scancode() then if game.show_next = 0 then game.show_next = 1 else game.show_next = 0
if scancode() = 31 and last_key <> scancode() then if game.sync_mode = 0 then inc game.sync_mode else game.sync_mode = 0
if scancode() <> last_key then last_key = scancode()
`DISPLAY TILES
paste image 10,0,0
x = 60 : y = 420
for ii = 0 to 19
  for aa = 0 to 9
    if board(ii,aa,0)>0
      paste image board(ii,aa,1),x,y
    endif
    inc x,20
  next aa
  dec y,20 : x = 60
next ii
if game.option = 0 : `if it's not a 40 lines game, 40 line games are a constant speed
  x=((game.lines-1)/10)
  if x < 0 then x = 0
  if x > 9 then x = 9
  if game.level < x then game.level = x : change_speed(x)
endif
if game.show_next = 1 : `show the next shape images if required
  text 275,165,"Next"
  select block.nxt
     case "O" : paste image 20,315,165 : endcase
     case "I" : paste image 21,315,165 : endcase
     case "S" : paste image 22,315,165 : endcase
     case "Z" : paste image 23,315,165 : endcase
     case "L" : paste image 24,315,165 : endcase
     case "J" : paste image 25,315,165 : endcase
     case "T" : paste image 26,315,165 : endcase
  endselect
endif
if game.sync_mode = 0
  text 0,0,"Esc to exit, p to pause, n toggle show next shape, s toggle sync mode :sync off"
else
  text 0,0,"Esc to exit, p to pause, n toggle show next shape, s toggle sync mode :sync on"
endif
`text 0,30,str$(scancode())
text 275,85,"Level "+str$(game.level)
text 275,100,"Lines "+str$(game.lines)
text 275,115,"Score "
text 275,130,str$(game.score)
text 275,145,"Time "+get_game_time()
if game.option = 1 and game.lines > 39 then game.over = 1 : block.x = -1
`text 0,15,str$(screen fps())
if escapekey() then stop = 1
until stop = 1
endfunction

function save_settings()
`saves game settings to settings.txt
if file exist("settings.txt") then delete file "settings.txt"
open to write 1,"settings.txt"
  write byte 1,game.sync_mode
  write byte 1,game.show_next
close file 1
endfunction

function load_settings()
`loads game settings from settings.txt
if file exist("settings.txt")
  open to read 1,"settings.txt"
    read byte 1,game.sync_mode
    read byte 1,game.show_next
  close file 1
endif
endfunction

function calculate_score()
`calculates the score and increases game.score accordingly
local free as integer
if block.falls > -1
  inc game.score,((24+(3*game.level))-block.falls)
endif
block.falls = 0
endfunction

function reset_game()
`set all variables and clear board for a in preperation for new game
for i = 0 to 19
  for a = 0 to 9
    board(i,a,0)=0
    board(i,a,1)=0
  next a
next i
block.x = -1 : game.over = 0
block.falls = -1 : `so it doesn't score the previous block that doesn't exist
game.level = game.start_level
game.lines = 0 : game.score = 0
if game.option = 0
  change_speed(game.level)
else
  game.speed = 350 : `for 40 line game
endif
block.shape = ""
block.y = 0
game.pause_time = 0
endfunction

function change_speed(level)
if game.option = 0 :`only change speeds in a normal game.
   select level
   case 0 : game.speed = 500 : endcase
   case 1 : game.speed = 450 : endcase
   case 2 : game.speed = 400 : endcase
   case 3 : game.speed = 350 : endcase
   case 4 : game.speed = 300 : endcase
   case 5 : game.speed = 250 : endcase
   case 6 : game.speed = 200 : endcase
   case 7 : game.speed = 150 : endcase
   case 8 : game.speed = 100 : endcase
   case 9 : game.speed = 50  : endcase
   endselect
  game.level = level
endif
endfunction

function next_shape()
local i as integer : local s as string
i = rnd(6)
select i
case 0 : s = "O" : endcase
case 1 : s = "I" : endcase
case 2 : s = "S" : endcase
case 3 : s = "Z" : endcase
case 4 : s = "L" : endcase
case 5 : s = "J" : endcase
case 6 : s = "T" : endcase
endselect
endfunction s

function convert_time(in as integer)
`converts time in ms to string MM:SS
local out as string : local mins as integer
in = in / 1000
if in > 60 then mins = in / 60 else mins = 0
in = in-(60*mins)
if in = 60 then in = 0 : inc mins
if mins < 10 then out = "0"
out = out + str$(mins)+":"
if in < 10 then out = out + "0"
out = out + str$(in)
endfunction out

function get_game_time()
`gets the time played
local out as string : local i as integer
if game.over = 0
  i = game.start_time + game.pause_time
  i = timer() - i
else
  i = game.end_time
endif
out = convert_time(i)
endfunction out

function line_check()
`checks if there is a complete line and removes it
local i as integer : local a as integer : local test as integer : local lines as integer
i = 0
lock pixels
repeat
  test = 1
  test = check_line(i)
  if test = 0
    inc game.lines
    drop_lines(i)
    temp = i
    dec i
  endif
  inc i
until i = 19
unlock pixels
endfunction

function drop_lines(i as integer)
`moves all #2 above i down
local a as integer
for a = 0 to 9
  board(i,a,0) = 0 : board(i,a,1) = 0
next a
inc i
if i < 19
  for i = i to 19
    for a = 0 to 9
      if board(i,a,0) = 2
        board(i-1,a,0) = board(i,a,0) : board(i-1,a,1) = board(i,a,1)
        board(i,a,0) = 0 : board(i,a,1) = 0
      endif
    next a
  next i
endif
endfunction

function check_line(i as integer)
`checks if line i is complete and returns 0 for complete line
local lines as integer : local a as integer
lines = 0
  for a = 0 to 9
    if board(i,a,0) < 2 then lines = 1 : exit
  next a
endfunction lines

function drop_shape()
`drops the shape to the bottom in one go
local i as integer : local a as integer
local stop as integer
if block.x > -1
  lock pixels
  repeat
    for i = 1 to 19
      for a = 0 to 9
         if board(i,a,0) = 1
           if board(i-1,a,0) = 2 then stop = 1
         endif
      next a
    next i
    for a = 0 to 9
      if board(0,a,0)=1 then stop =1
    next a
    if stop = 1
      for i = 0 to 19
        for a = 0 to 9
          if board(i,a,0) = 1 then board(i,a,0) = 2
        next a
      next i
      block.x = -1
    else
      for i = 0 to 19
        for a = 0 to 9
          if board(i,a,0) = 1
            board(i-1,a,0) = 1 : board(i-1,a,1) = board(i,a,1)
            board(i,a,0) = 0 : board(i,a,1) = 0
          endif
        next i
      next i
      dec block.y
    endif
  until stop = 1
  unlock pixels
endif
endfunction

function move_down()
`moves the shape down one step
local i as integer : local a as integer
stop as integer
if block.x > -1
  for i = 1 to 19
    for a = 0 to 9
      if board(i,a,0) = 1
        if board(i-1,a,0) = 2 then stop = 1 `can't move down as #2 below #1
      endif
    next a
  next i
  for a = 0 to 9
    if board(0,a,0)=1 then stop =1 `can't move down as shape is at bottom of board
  next a
  if stop = 1 `block can't move down so convert all #1 to #2
    for i = 0 to 19
      for a = 0 to 9
        if board(i,a,0) = 1 then board(i,a,0) = 2
      next a
    next i
    block.x = -1
  endif
  if stop = 0 `block can move down so move all #1 down 1
    for i = 0 to 19
      for a = 0 to 9
        if board(i,a,0) = 1
          board(i-1,a,0) = 1 : board(i-1,a,1) = board(i,a,1)
          board(i,a,0) = 0 : board(i,a,1) = 0
        endif
      next i
    next i
    dec block.y
    inc block.falls
  endif
endif
endfunction

function move_shape(direction as integer)
`moves the shape to the side
`direction : 0=left : 1=right
local i as integer : local a as integer : local stop as integer
maxx as integer : minx as integer
if block.shape = "O" then minx = 1 : maxx = 9
if block.shape = "I"
  if block.rotation = 0 then minx = 2 : maxx = 8
  if block.rotation = 1 then minx = 0 : maxx = 9
endif
if block.shape = "S" or block.shape = "Z"
  if block.rotation = 0 then minx = 1 : maxx = 8
  if block.rotation = 1 then minx = 0 : maxx = 8
endif
if block.shape = "L" or block.shape = "J" or block.shape = "T"
  if block.rotation = 0 or block.rotation = 2 then minx = 1 : maxx = 8
  if block.rotation = 1 then minx = 0 : maxx = 8
  if block.rotation = 3 then minx = 1 : maxx = 9
  endif
if direction = 0 and block.x > minx
  for i = 0 to 19
    for a = 0 to 9
      if board(i,a,0) = 1
        if board(i,a-1) = 2 then stop = 1
      endif
    next a
  next i
  if stop = 0
    if block.x > minx
      for i = 0 to 19
        for a = 0 to 9
          if board(i,a,0)=1
            board(i,a-1,0)=1 : board(i,a-1,1)=board(i,a,1)
            board(i,a,0)=0 : board(i,a,1)=0
          endif
        next a
      next i
      dec block.x
    endif
  endif
endif
if direction = 1 and block.x > -1
    for i = 0 to 19
    for a = 0 to 9
      if board(i,a,0) = 1
        if board(i,a+1) = 2 then stop = 1
      endif
    next a
  next i
  if stop = 0
    if block.x < maxx
      for i = 0 to 19
        for a = 9 to 0 step -1
          if board(i,a,0)=1
            board(i,a+1,0)=1 : board(i,a+1,1)=board(i,a,1)
            board(i,a,0)=0 : board(i,a,1)=0
          endif
        next a
      next i
      inc block.x
    endif
  endif
endif
endfunction

function rotate_shape()
`rotates the shape anti-clockwise
local col as integer
if block.x > -1
col = board(block.y,block.x,1)
select block.shape
case "I"
  if block.rotation = 0
    if block.y > 1 and block.y < 19
      if board(block.y+1,block.x,0)=0
        if board(block.y-1,block.x,0)=0
          if board(block.y-2,block.x,0)=0
            board(block.y,block.x-2,0)=0 : board(block.y,block.x-1,0)=0 : board(block.y,block.x+1,0)=0
            board(block.y,block.x-2,1)=0 : board(block.y,block.x-1,1)=0 : board(block.y,block.x+1,1)=0
            board(block.y+1,block.x,0)=1 : board(block.y-1,block.x,0)=1 : board(block.y-2,block.x,0)=1
            board(block.y+1,block.x,1)=col : board(block.y-1,block.x,1)=col : board(block.y-2,block.x,1)=col
            block.rotation = 1
            rot = 1
          endif
        endif
      endif
    endif
  else
    if block.x > 1 and block.x < 9
      if board(block.y,block.x-2,0)=0
        if board(block.y,block.x-1,0)=0
          if board(block.y,block.x+1,0)=0
            board(block.y-1,block.x,0)=0 : board(block.y+1,block.x,0)=0 : board(block.y-2,block.x,0)=0
            board(block.y-1,block.x,1)=0 : board(block.y+1,block.x,1)=0 : board(block.y-2,block.x,1)=0
            board(block.y,block.x-2,0)=1 : board(block.y,block.x-1,0)=1 : board(block.y,block.x+1,0)=1
            board(block.y,block.x-2,1)=col : board(block.y,block.x-1,1)=col : board(block.y,block.x+1,1)=col
            block.rotation = 0
          endif
        endif
      endif
    endif
  endif
endcase
case "S"
  if block.rotation = 0
    if block.y < 19
      if board(block.y+1,block.x,0)=0
        if board(block.y-1,block.x+1,0)=0
          board(block.y-1,block.x-1,0)=0 : board(block.y-1,block.x,0)=0
          board(block.y-1,block.x-1,1)=0 : board(block.y-1,block.x,1)=0
          board(block.y+1,block.x,0)=1 : board(block.y-1,block.x+1,0)=1
          board(block.y+1,block.x,1)=col : board(block.y-1,block.x+1,1)=col
          block.rotation = 1
        endif
      endif
    endif
  else
    if block.x > 0
      if board(block.y-1,block.x,0)=0
        if board(block.y-1,block.x-1,0)=0
          board(block.y+1,block.x,0)=0 : board(block.y-1,block.x+1,0)=0
          board(block.y+1,block.x,1)=0 : board(block.y-1,block.x+1,1)=0
          board(block.y-1,block.x,0)=1 : board(block.y-1,block.x-1,0)=1
          board(block.y-1,block.x,1)=col : board(block.y-1,block.x-1,1)=col
          block.rotation = 0
        endif
      endif
    endif
  endif
endcase
case "Z"
  if block.rotation = 0
    if block.y < 19
      if board(block.y,block.x+1,0) = 0
        if board(block.y+1,block.x+1,0) = 0
          board(block.y,block.x-1,0) = 0 : board(block.y-1,block.x+1,0) = 0
          board(block.y,block.x-1,1) = 0 : board(block.y-1,block.x+1,1) = 0
          board(block.y,block.x+1,0) = 1 : board(block.y+1,block.x+1,0) = 1
          board(block.y,block.x+1,1) = col : board(block.y+1,block.x+1,1) = col
          block.rotation = 1
        endif
      endif
    endif
  else
    if block.x > 0
      if board(block.y,block.x-1,0) = 0
        if board(block.y-1,block.x+1,0) = 0
          board(block.y,block.x+1,0) = 0 : board(block.y+1,block.x+1,0) = 0
          board(block.y,block.x+1,1) = 0 : board(block.y+1,block.x+1,1) = 0
          board(block.y,block.x-1,0) = 1 : board(block.y-1,block.x+1,0) = 1
          board(block.y,block.x-1,1) = col : board(block.y-1,block.x+1,1) = col
          block.rotation = 0
        endif
      endif
    endif
  endif
endcase
case "L"
  if block.rotation = 0
    if block.y < 19 and block.y > 0
      if board(block.y+1,block.x,0) = 0
        if board(block.y-1,block.x,0) = 0
          if board(block.y-1,block.x+1,0) = 0
            board(block.y,block.x-1,0) = 0 : board(block.y-1,block.x-1,0) = 0 : board(block.y,block.x+1,0) = 0
            board(block.y,block.x-1,1) = 0 : board(block.y-1,block.x-1,1) = 0 : board(block.y,block.x+1,1) = 0
            board(block.y+1,block.x,0) = 1 : board(block.y-1,block.x,0) = 1 :  board(block.y-1,block.x+1,0) = 1
            board(block.y+1,block.x,1) = col : board(block.y-1,block.x,1) = col :  board(block.y-1,block.x+1,1) = col
            block.rotation = 1
          endif
        endif
      endif
    endif
  else
    if block.rotation = 1
      if block.x > 0 and block.y < 19
        if board(block.y,block.x+1,0) = 0
          if board(block.y+1,block.x+1,0) = 0
            if board(block.y,block.x-1,0) = 0
              board(block.y+1,block.x,0) = 0 : board(block.y-1,block.x,0) = 0 : board(block.y-1,block.x+1,0) = 0
              board(block.y+1,block.x,1) = 0 : board(block.y-1,block.x,1) = 0 : board(block.y-1,block.x+1,1) = 0
              board(block.y,block.x+1,0) = 1 : board(block.y+1,block.x+1,0) = 1 : board(block.y,block.x-1,0) = 1
              board(block.y,block.x+1,1) = col : board(block.y+1,block.x+1,1) = col : board(block.y,block.x-1,1) = col
              block.rotation = 2
            endif
          endif
        endif
      endif
    else
      if block.rotation = 2
        if block.x > 0 and block.x < 9 and block.y < 19
          if board(block.y+1,block.x,0) = 0
            if board(block.y+1,block.x-1,0) = 0
              if board(block.y-1,block.x,0) = 0
                board(block.y,block.x-1,0) = 0 : board(block.y,block.x+1,0) = 0 : board(block.y+1,block.x+1,0) = 0
                board(block.y,block.x-1,1) = 0 : board(block.y,block.x+1,1) = 0 : board(block.y+1,block.x+1,1) = 0
                board(block.y+1,block.x,0) = 1 : board(block.y+1,block.x-1,0) = 1 : board(block.y-1,block.x,0) = 1
                board(block.y+1,block.x,1) = col : board(block.y+1,block.x-1,1) = col : board(block.y-1,block.x,1) = col
                block.rotation = 3
              endif
            endif
          endif
        endif
      else
        if block.rotation = 3
          if block.x > 0 and block.x < 9
            if board(block.y,block.x-1,0) = 0
              if board(block.y-1,block.x-1,0) = 0
                if board(block.y,block.x+1,0) = 0
                  board(block.y,block.x-1,0) = 1 : board(block.y-1,block.x-1,0) = 1 : board(block.y,block.x+1,0) = 1
                  board(block.y,block.x-1,1) = col : board(block.y-1,block.x-1,1) = col : board(block.y,block.x+1,1) = col
                  board(block.y-1,block.x,0) = 0 : board(block.y+1,block.x,0) = 0 : board(block.y+1,block.x-1,0) = 0
                  board(block.y-1,block.x,1) = 0 : board(block.y+1,block.x,1) = 0 : board(block.y+1,block.x-1,1) = 0
                  block.rotation = 0
                endif
              endif
            endif
          endif
        endif
      endif
    endif
  endif
endcase
case "J"
  if block.rotation = 0
    if block.y < 19 and block.y > 0
      if board(block.y+1,block.x,0) = 0
        if board(block.y-1,block.x,0) = 0
          if board(block.y+1,block.x+1,0) = 0
            board(block.y,block.x+1,0) = 0 : board(block.y-1,block.x+1,0) = 0 : board(block.y,block.x-1,0) = 0
            board(block.y,block.x+1,1) = 0 : board(block.y-1,block.x+1,1) = 0 : board(block.y,block.x-1,1) = 0
            board(block.y+1,block.x,0) = 1 : board(block.y-1,block.x,0) = 1 :  board(block.y+1,block.x+1,0) = 1
            board(block.y+1,block.x,1) = col : board(block.y-1,block.x,1) = col :  board(block.y+1,block.x+1,1) = col
            block.rotation = 1
          endif
        endif
      endif
    endif
  else
    if block.rotation = 1
      if block.x > 0 and block.y < 19
        if board(block.y,block.x-1,0) = 0
          if board(block.y+1,block.x-1,0) = 0
            if board(block.y,block.x+1,0) = 0
              board(block.y+1,block.x,0) = 0 : board(block.y+1,block.x+1,0) = 0 : board(block.y-1,block.x,0) = 0
              board(block.y+1,block.x,1) = 0 : board(block.y+1,block.x+1,1) = 0 : board(block.y-1,block.x,1) = 0
              board(block.y,block.x-1,0) = 1 : board(block.y+1,block.x-1,0) = 1 : board(block.y,block.x+1,0) = 1
              board(block.y,block.x-1,1) = col : board(block.y+1,block.x-1,1) = col : board(block.y,block.x+1,1) = col
              block.rotation = 2
            endif
          endif
        endif
      endif
    else
      if block.rotation = 2
        if block.x > 0 and block.x < 9 and block.y < 19
          if board(block.y+1,block.x,0) = 0
            if board(block.y-1,block.x,0) = 0
              if board(block.y-1,block.x-1,0) = 0
                board(block.y,block.x-1,0) = 0 : board(block.y+1,block.x-1,0) = 0 : board(block.y,block.x+1,0) = 0
                board(block.y,block.x-1,1) = 0 : board(block.y+1,block.x-1,1) = 0 : board(block.y,block.x+1,1) = 0
                board(block.y+1,block.x,0) = 1 : board(block.y-1,block.x,0) = 1 : board(block.y-1,block.x-1,0) = 1
                board(block.y+1,block.x,1) = col : board(block.y-1,block.x,1) = col : board(block.y-1,block.x-1,1) = col
                block.rotation = 3
              endif
            endif
          endif
        endif
      else
        if block.rotation = 3
          if block.x > 0 and block.x < 9
            if board(block.y,block.x+1,0) = 0
              if board(block.y-1,block.x+1,0) = 0
                if board(block.y,block.x-1,0) = 0
                  board(block.y-1,block.x,0) = 0 : board(block.y-1,block.x-1,0) = 0 : board(block.y+1,block.x,0) = 0
                  board(block.y-1,block.x,1) = 0 : board(block.y-1,block.x-1,1) = 0 : board(block.y+1,block.x,1) = 0
                  board(block.y,block.x+1,0) = 1 : board(block.y-1,block.x+1,0) = 1 : board(block.y,block.x-1,0) = 1
                  board(block.y,block.x+1,1) = col : board(block.y-1,block.x+1,1) = col : board(block.y,block.x-1,1) = col
                  block.rotation = 0
                endif
              endif
            endif
          endif
        endif
      endif
    endif
  endif
endcase
case "T"
  if block.rotation = 0
    if block.y < 19
      if board(block.y+1,block.x,0) = 0
        board(block.y,block.x-1,0) = 0 : board(block.y,block.x-1,1) = 0
        board(block.y+1,block.x,0) = 1 : board(block.y+1,block.x,1) = col
        block.rotation = 1
      endif
    endif
  else
    if block.rotation = 1
      if block.x > 0 and block.y < 19
        if board(block.y,block.x-1,0) = 0
          board(block.y-1,block.x,0) = 0 : board(block.y-1,block.x,1) = 0
          board(block.y,block.x-1,0) = 1 : board(block.y,block.x-1,1) = col
          block.rotation = 2
        endif
      endif
    else
      if block.rotation = 2
        if block.y > 0
          if board(block.y-1,block.x,0) = 0
            board(block.y,block.x+1,0) = 0 : board(block.y,block.x+1,1) = 0
            board(block.y-1,block.x,0) = 1 : board(block.y-1,block.x,1) = col
            block.rotation = 3
          endif
        endif
      else
        if block.rotation = 3
          if block.x < 9
            if board(block.y,block.x+1,0) = 0
              board(block.y+1,block.x,0) = 0 : board(block.y+1,block.x,1) = 0
              board(block.y,block.x+1,0) = 1 : board(block.y,block.x+1,1) = col
              block.rotation = 0
            endif
          endif
        endif
      endif
    endif
  endif
endcase
endselect
endif `if block.x > -1
endfunction

function draw_shape()
`draws the shape in block.shape at the top of the screen
`returns 1 if the shape can't be drawn.
local i as integer : local over as integer : local col as integer
col = rnd(4)+1 : `get a random colour for the new shape
if board(block.y,block.x,0)=0
  over = 1
  select block.shape
  case "O"
    if board(block.y,block.x-1,0) = 0
      if board(block.y-1,block.x-1,0) = 0
        if board(block.y-1,block.x,0) = 0
           board(block.y,block.x,0)=1 :  board(block.y,block.x,1)=col
           board(block.y,block.x-1,0) = 1 : board(block.y,block.x-1,1) = col
           board(block.y-1,block.x-1,0) = 1 : board(block.y-1,block.x-1,1) = col
           board(block.y-1,block.x,0) = 1 : board(block.y-1,block.x,1) = col
           over = 0
        endif
      endif
    else
      over = 1
    endif
  endcase
  case "I"
    if board(block.y,block.x,0) = 0
      if board(block.y,block.x+1,0) = 0
        if board(block.y,block.x-1,0) = 0
          if board(block.y,block.x-2,0) = 0
            board(block.y,block.x,0) = 1 : board(block.y,block.x,1) = col
            board(block.y,block.x+1,0) = 1 : board(block.y,block.x+1,1) = col
            board(block.y,block.x-1,0) = 1 : board(block.y,block.x-1,1) = col
            board(block.y,block.x-2,0) = 1 : board(block.y,block.x-2,1) = col
            over = 0
          endif
        endif
      endif
    endif
  endcase
  case "S"
    if board(block.y,block.x,0) = 0
      if board(block.y,block.x+1,0) = 0
        if board(block.y-1,block.x,0) = 0
          if board(block.y-1,block.x-1,0) = 0
            board(block.y,block.x,0) = 1 : board(block.y,block.x,1) = col
            board(block.y,block.x+1,0) = 1 : board(block.y,block.x+1,1) = col
            board(block.y-1,block.x,0) = 1 : board(block.y-1,block.x,1) = col
            board(block.y-1,block.x-1,0) = 1 : board(block.y-1,block.x-1,1) = col
            over = 0
          endif
        endif
      endif
    endif
  endcase
  case "Z"
    if board(block.y,block.x,0) = 0
      if board(block.y,block.x-1,0) = 0
        if board(block.y-1,block.x,0) = 0
          if board(block.y-1,block.x+1,0) = 0
            board(block.y,block.x,0) = 1 : board(block.y,block.x,1) = col
            board(block.y,block.x-1,0) = 1 : board(block.y,block.x-1,1) = col
            board(block.y-1,block.x,0) = 1 : board(block.y-1,block.x,1) = col
            board(block.y-1,block.x+1,0) = 1 : board(block.y-1,block.x+1,1) = col
            over = 0
          endif
        endif
      endif
    endif
  endcase
  case "L"
    if board(block.y,block.x,0) = 0
      if board(block.y,block.x+1,0) = 0
        if board(block.y,block.x-1,0) = 0
          if board(block.y-1,block.x-1,0) = 0
            board(block.y,block.x,0) = 1 : board(block.y,block.x,1) = col
            board(block.y,block.x+1,0) = 1 : board(block.y,block.x+1,1) = col
            board(block.y,block.x-1,0) = 1 : board(block.y,block.x-1,1) = col
            board(block.y-1,block.x-1,0) = 1 : board(block.y-1,block.x-1,1) = col
            over = 0
          endif
        endif
      endif
    endif
  endcase
  case "J"
    if board(block.y,block.x,0) = 0
      if board(block.y,block.x-1,0) = 0
        if board(block.y,block.x+1,0) = 0
          if board(block.y-1,block.x+1,0) = 0
            board(block.y,block.x,0) = 1 : board(block.y,block.x,1) = col
            board(block.y,block.x-1,0) = 1 : board(block.y,block.x-1,1) = col
            board(block.y,block.x+1,0) = 1 : board(block.y,block.x+1,1) = col
            board(block.y-1,block.x+1,0) = 1 : board(block.y-1,block.x+1,1) = col
            over = 0
          endif
        endif
      endif
    endif
  endcase
  case "T"
    if board(block.y,block.x,0) = 0
      if board(block.y,block.x+1,0) = 0
        if board(block.y,block.x-1,0) = 0
          if board(block.y-1,block.x,0) = 0
            board(block.y,block.x,0) = 1 : board(block.y,block.x,1) = col
            board(block.y,block.x+1,0) = 1 : board(block.y,block.x+1,1) = col
            board(block.y,block.x-1,0) = 1 : board(block.y,block.x-1,1) = col
            board(block.y-1,block.x,0) = 1 : board(block.y-1,block.x,1) = col
            over = 0
          endif
        endif
      endif
    endif
  endcase
  endselect
else
over = 1
endif
endfunction over
